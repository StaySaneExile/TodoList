{"version":3,"sources":["TodoList/TodoHeader.tsx","Tasks/TodoTask.tsx","TodoList/TodoTasks.tsx","TodoList/TodoFooter.tsx","AddNewTitle.tsx","api.ts","reducer.ts","TodoList.tsx","App.tsx","serviceWorker.js","Store.ts","index.js"],"names":["TodoHeader","state","editMode","title","_this","props","onClickDeleteTodoList","onDeleteTodoList","todoListId","currentTargetTitle","e","setState","currentTarget","value","editModeIsOFF","changeTitleTodo","editModeIsON","render","react_default","a","createElement","onBlur","onChange","className","onClick","React","Component","TodoTask","isEditMode","task","activatedEditMode","deActivatedEditMode","changeTitle","onIsDoneChanged","changeStatus","checked","onTitleChanged","onDeleteTask","id","classDone","status","type","autoFocus","TodoTasks","tasksElement","map","src_Tasks_TodoTask","TodoFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","AddNewTitle","error","inputValue","onAddItemClick","newTitle","trim","addItem","titleChange","onKeyPress","key","inputStyleErr","inputStyleDef","style","placeholder","holder","buttonStyle","buttonTitle","instance","axios","create","baseURL","withCredentials","headers","API-KEY","api","todoId","put","concat","get","post","Id","delete","taskId","initialState","todolists","TodoList","tasks","restoreState","getTasks","addTask","createTask","deleteTask","changeTask","newTask","Object","objectSpread2","newFilterValue","_this$props$tasks","filtredTasks","filter","t","TodoList_TodoHeader","src_AddNewTitle","TodoList_TodoTasks","src_TodoList_TodoFooter","this","connect","dispatch","then","res","data","resultCode","changeTasks","item","changeTitleTodolist","todolistId","deleteTasks","items","App","getTodolists","addTodoList","createTodolists","deleteTodolist","todoLists","src_TodoList_0","ConnectedApp","reducer","newTodoList","Boolean","window","location","hostname","match","reducers","combineReducers","arguments","length","undefined","action","toConsumableArray","td","todo","todoList","tl","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f42dbf42.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\n\ntype StateType = {\n    editMode: boolean\n    title: string\n}\ntype OwnTypes = {\n    title: string\n    changeTitleTodo: (todoId: string , title: string)=> void\n    onDeleteTodoList: (Id: string)=> void\n    todoListId: string\n}\ntype MapDispatchType = {\n    onDeleteTodoList: (id: string)=> void\n    changeTitleTodo: (id: string, title: string)=> void\n}\n\nclass TodoHeader extends React.Component<MapDispatchType & OwnTypes, StateType> {\n\n    state: StateType = {\n        editMode: false,\n        title: this.props.title\n    };\n\n    onClickDeleteTodoList = () => {\n        this.props.onDeleteTodoList(this.props.todoListId)\n    }\n    currentTargetTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        debugger\n        this.setState({\n            title: e.currentTarget.value\n        })\n    }\n\n    editModeIsOFF = () => {\n        debugger\n        this.setState({editMode: false})\n        this.props.changeTitleTodo(this.props.todoListId, this.state.title)\n    }\n\n    editModeIsON = () => {\n        debugger\n        this.setState({editMode: true})\n    }\n\n\n    render = () => {\n        return (\n            <div>\n            {this.state.editMode\n                    ?\n                        <input onBlur={this.editModeIsOFF}\n                               onChange={this.currentTargetTitle}\n                               value={this.state.title}/>\n                    :\n                    <div className=\"header_tasks\">\n                        <h3 onClick={this.editModeIsON} className=\"header_title\">{this.props.title}</h3>\n                        <button onClick={this.onClickDeleteTodoList} className='deleteTodoList'/>\n                    </div>\n            }\n            </div>\n        );\n    }\n}\n\n\nexport default TodoHeader;\n\n","import React, {ChangeEvent} from 'react';\nimport './TodoTask.css';\nimport {TaskType} from \"../Types/enteties\";\n\ntype OwnType = {\n    task: TaskType\n    onDeleteTask: (taskId: string) =>void\n    changeTitle: (task: TaskType, title: string) => void\n    changeStatus: (newTask: TaskType, status: boolean) => void\n}\ntype StateType = {\n    isEditMode: boolean,\n    title: string\n}\n\n\n\nclass TodoTask extends React.Component<OwnType, StateType> {\n    state:StateType = {\n        isEditMode: false,\n        title: this.props.task.title\n    }\n    activatedEditMode = () => {\n        this.setState({isEditMode: true})\n    };\n    deActivatedEditMode = () => {\n        this.setState({isEditMode: false})\n        this.props.changeTitle(this.props.task, this.state.title)\n    }\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.props.changeStatus(this.props.task, e.currentTarget.checked)\n    };\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            title: e.currentTarget.value\n        })\n    };\n    onDeleteTask = () => {\n        this.props.onDeleteTask(this.props.task.id)\n    }\n\n\n    render = () => {\n\n        let classDone = this.props.task.status === 2 ? \"todoList-task_done\" : \"todoList-task\";\n\n        return (\n            <div className='task'>\n                <div className={classDone}>\n                    <input type=\"checkbox\"\n                           className='checkbox'\n                           checked={this.props.task.status === 2}\n                           onChange={this.onIsDoneChanged}/>\n\n                    {this.state.isEditMode\n                        ? <input value={this.state.title}\n                                 onChange={this.onTitleChanged}\n                                 autoFocus={true}\n                                 onBlur={this.deActivatedEditMode}/>\n                        :\n                        <div className={'title_task'}>\n                        <span onClick={this.activatedEditMode}>\n                        {this.props.task.title}</span>\n                        </div>\n                    }\n                    <span className='delete' onClick={this.onDeleteTask}/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\n\nexport default TodoTask;\n\n","import React from 'react';\nimport '../TodoList.css';\nimport TodoTask from \"../Tasks/TodoTask\";\nimport {TaskType} from \"../Types/enteties\";\n\ntype OwnType = {\n    task: Array<TaskType>\n    onDeleteTask: (taskId: string) =>void\n    changeTitle: (task: TaskType, title: string) => void\n    changeStatus: (newTask: TaskType, status: boolean) => void\n}\n\nclass TodoTasks extends React.Component<OwnType> {\n    render = () => {\n        let tasksElement = this.props.task.map(task => {\n            return (\n                <TodoTask task={task}\n                          onDeleteTask={this.props.onDeleteTask}\n                          changeTitle={this.props.changeTitle}\n                          changeStatus={this.props.changeStatus}/>\n            )\n        });\n\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElement}\n            </div>\n\n        );\n    }\n}\n\nexport default TodoTasks;\n\n\n","import React from 'react';\nimport './TodoFooter.css';\n\n\n\ntype OwnType = {\n    filterValue: string\n    changeFilter: (newFilterValue: string)=> void\n}\n\nclass TodoFooter extends React.Component<OwnType> {\n    state = {\n        isHidden: false\n    }\n    onAllFilterClick = () => {this.props.changeFilter('All')};\n    onCompletedFilterClick = () => {this.props.changeFilter('Completed')};\n    onActiveFilterClick = () => {this.props.changeFilter('Active')};\n    onShowFiltersClick = () => {this.setState({isHidden: false})};\n    onHideFiltersClick = () => {this.setState({isHidden: true})};\n\n    render = () => {\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"default_button\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"default_button\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"default_button\";\n\n        return (\n            <div className=\"todoList-footer\">\n                {!this.state.isHidden &&\n                <div>\n                    <button className={classForAll} onClick={this.onAllFilterClick}>All</button>\n                    <button className={classForCompleted} onClick={this.onCompletedFilterClick}>Completed</button>\n                    <button className={classForActive} onClick={this.onActiveFilterClick}>Active</button>\n                </div>\n                }\n            </div>\n\n        );\n    }\n}\n\nexport default TodoFooter;\n\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport './App.css';\n\ntype OwnPropsType = {\n    addItem: (title: string) => void\n    inputStyleErr?: string\n    inputStyleDef?: string\n    buttonStyle?: string\n    buttonTitle?: string\n    holder?: string\n    style?: string\n}\n\ntype StateType = {\n    error: boolean\n    inputValue: string\n}\n\n\n\nclass AddNewTitle extends React.Component<OwnPropsType, StateType> {\n    state: StateType = {\n        error: false,\n        inputValue: \"\"\n    }\n    onAddItemClick = () => {\n        let newTitle = this.state.inputValue.trim();\n        if (newTitle === \"\") {\n            this.setState({error: true})\n        } else {\n            this.props.addItem(newTitle)\n            this.setState({\n                error: false,\n                inputValue: \"\"\n            })\n        }\n    }\n    titleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            error: false,\n            inputValue: e.currentTarget.value\n        })\n    }\n    onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick();\n        }\n    }\n    render = () => {\n        let error = this.state.error ? this.props.inputStyleErr : this.props.inputStyleDef;\n        return (\n            <div className={this.props.style}>\n                <input className={error}\n                       onChange={this.titleChange}\n                       onKeyPress={this.onKeyPress}\n                       value={this.state.inputValue}\n                       type=\"text\"\n                       placeholder={this.props.holder}/>\n                <button className={this.props.buttonStyle}\n                        onClick={this.onAddItemClick}>{this.props.buttonTitle}</button>\n            </div>\n        );\n    }\n}\n\n\nexport default AddNewTitle;\n\n","import axios from \"axios\";\r\nimport {TaskType, TodoListType} from \"./Types/enteties\";\r\n\r\nexport const instance = axios.create ({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '55c7683d-910d-4237-970d-b8f19c995706'}\r\n})\r\n\r\ntype CommonResponseType<T, G> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\ntype TaskDataType<T> = {\r\n    error?: number\r\n    items: T\r\n    totalCount: number\r\n}\r\n\r\nexport const api = {\r\n    changeTitleTodo (todoId: string, title: string) {\r\n        return instance.put<CommonResponseType<{}, {}>>(`todo-lists/${todoId}`, {title: title})\r\n    },\r\n    getTodolists() {\r\n        return instance.get<Array<TodoListType>>(\"todo-lists\")\r\n    },\r\n    getTasks (todoId: string) {\r\n        return instance.get<TaskDataType<Array<TaskType>>>(`todo-lists/${todoId}/tasks`,)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{item: TodoListType}, {}>>(\"todo-lists\", {title: title})\r\n    },\r\n    deleteTodolist(Id: string) {\r\n        return instance.delete<CommonResponseType<{}, {}>>(`todo-lists/${Id}`)\r\n    },\r\n    createTask (todoId: string, newTitle: string) {\r\n        return instance.post<CommonResponseType<{item: TaskType}, {}>>(`todo-lists/${todoId}/tasks`,{title: newTitle},)\r\n    },\r\n    deleteTask(todoId: string, taskId: string) {\r\n      return instance.delete<CommonResponseType<{}, {}>>(`todo-lists/${todoId}/tasks/${taskId}`)\r\n    },\r\n    changeTask(todoId: string, taskId: string, task: TaskType) {\r\n        return instance.put<CommonResponseType<{item: TaskType}, {}>>(`todo-lists/${todoId}/tasks/${taskId}`, task)\r\n    }\r\n}","import {api} from \"./api\";\r\nimport {ChangeTitleTodoListType, TaskType, TodoListType} from \"./Types/enteties\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const CREATE_TODOLIST = 'TodoAPP/CREATE_TODOLIST'\r\nexport const DELETE_TODO_LIST = 'TodoAPP/DELETE_TODO_LIST'\r\nexport const SET_TODOLIST = 'TodoAPP/SET_TODOLIST'\r\nexport const ADD_TASK = 'TodoAPP/ADD_TASK'\r\nexport const DELETE_TASK = 'TodoAPP/DELETE_TASK'\r\nexport const SET_TASKS = 'TodoAPP/SET_TASKS'\r\nexport const CHANGE_TASK = 'TodoAPP/CHANGE-TASK'\r\nexport const CHANGE_TITLE_TODOLIST = \"TodoList/Reducer/CHANGE_TITLE_TODOLIST\";\r\n\r\ntype initialStateType = {\r\n    todolists: Array<TodoListType>\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    todolists: []\r\n}\r\n\r\n\r\nexport const reducer = (state: initialStateType = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case CREATE_TODOLIST:\r\n            return {\r\n                ...state, todolists: [...state.todolists, {...action.newTodoList}]\r\n            }\r\n        case DELETE_TODO_LIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(td => td.id !== action.newTodoList)\r\n            }\r\n        case SET_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(td => ({...td, tasks: []}))\r\n            }\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(td => {\r\n                    if (td.id !== action.todolistId) {\r\n                        return td\r\n                    } else {\r\n                        return {...td, tasks: action.tasks}\r\n                    }\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state, todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {...todo, tasks: [...todo.tasks, action.newTask]}\r\n                    }\r\n                })\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state, todolists: state.todolists.map(todoList => {\r\n                    if (todoList.id !== action.todoListId) {\r\n                        return todoList\r\n                    } else {\r\n                        return {\r\n                            ...todoList, tasks: todoList.tasks.filter(task =>\r\n                                task.id !== action.taskId)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        case CHANGE_TITLE_TODOLIST:\r\n            debugger\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todoId) {\r\n                        return todo\r\n                    } else {\r\n                        debugger\r\n                        return {...todo, title: action.title}\r\n                    }\r\n                })\r\n            }\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(tl => {\r\n                    if (tl.id === action.todoId) {\r\n                        return {\r\n                            ...tl,\r\n                            tasks: tl.tasks.map(t => {\r\n                                if (t.id !== action.taskId) {\r\n                                    return t;\r\n                                } else {\r\n                                    return action.task;\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return tl\r\n                    }\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsTypes =\r\n    deleteTasksType\r\n    | addTaskType\r\n    | ChangeTitleTodo\r\n    | changeTaskType\r\n    | createTodoListType\r\n    | deleteTodoListType\r\n    | setTodoListsType\r\n    | setTaskType\r\n\r\n\r\ntype ChangeTitleTodo = {\r\n    type: typeof CHANGE_TITLE_TODOLIST\r\n    todoId: string\r\n    title: string\r\n}\r\ntype changeTaskType = {\r\n    type: typeof CHANGE_TASK\r\n    todoId: string\r\n    taskId: string\r\n    task: TaskType\r\n}\r\ntype createTodoListType = {\r\n    type: typeof CREATE_TODOLIST\r\n    newTodoList: TodoListType\r\n}\r\ntype deleteTodoListType = {\r\n    type: typeof DELETE_TODO_LIST\r\n    newTodoList: string\r\n}\r\ntype setTodoListsType = {\r\n    type: typeof SET_TODOLIST\r\n    todolists: Array<TodoListType>\r\n}\r\ntype setTaskType = {\r\n    type: typeof SET_TASKS\r\n    todolistId: string\r\n    tasks: Array<TaskType>\r\n}\r\ntype addTaskType = {\r\n    type: typeof ADD_TASK\r\n    todolistId: string\r\n    newTask: TaskType\r\n}\r\ntype deleteTasksType = {\r\n    type: typeof DELETE_TASK\r\n    todoListId: string\r\n    taskId: string\r\n}\r\n\r\n\r\nconst changeTasks = (todoId: string, taskId: string, task: TaskType): changeTaskType => ({\r\n    type: CHANGE_TASK,\r\n    todoId,\r\n    taskId,\r\n    task\r\n})\r\nconst changeTitleTodolist = (todoId: string, title: string): ChangeTitleTodo => ({\r\n    type: CHANGE_TITLE_TODOLIST,\r\n    todoId,\r\n    title\r\n})\r\nconst createTodoList = (newTodoList: TodoListType): createTodoListType => ({type: CREATE_TODOLIST, newTodoList})\r\nconst deleteTodoList = (newTodoList: string): deleteTodoListType => ({type: DELETE_TODO_LIST, newTodoList})\r\nconst setTodoLists = (todolists: Array<TodoListType>): setTodoListsType => ({type: SET_TODOLIST, todolists})\r\nconst setTask = (todolistId: string, tasks: Array<TaskType>): setTaskType => ({type: SET_TASKS, todolistId, tasks})\r\nconst addTask = (todolistId: string, newTask: TaskType): addTaskType => ({type: ADD_TASK, todolistId, newTask})\r\nconst deleteTasks = (todoListId: string, taskId: string): deleteTasksType => ({type: DELETE_TASK, todoListId, taskId})\r\n\r\n\r\nexport const getTodolists = () => {\r\n    return (dispatch: Dispatch<ActionsTypes>) => {\r\n        api.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodoLists(res.data))\r\n            })\r\n    }\r\n}\r\nexport const getTasks = (todoId: string) => {\r\n    return (dispatch: Dispatch<ActionsTypes>) => {\r\n        api.getTasks(todoId)\r\n            .then(res => {\r\n                debugger\r\n                if (!res.data.error) {\r\n                    dispatch(setTask(todoId, res.data.items))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const createTodolists = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsTypes>) => {\r\n        api.createTodolist(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(createTodoList(res.data.data.item))\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const deleteTodolist = (Id: string) => {\r\n    return (dispatch: Dispatch<ActionsTypes>) => {\r\n        api.deleteTodolist(Id)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(deleteTodoList(Id))\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const createTask = (todoId: string, newTitle: string) => {\r\n    return (dispatch: Dispatch<ActionsTypes>) => {\r\n        api.createTask(todoId, newTitle)\r\n            .then(res => {\r\n                debugger\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTask(todoId, res.data.data.item))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const deleteTask = (todoId: string, taskId: string) => {\r\n    return (dispatch: Dispatch<ActionsTypes>) => {\r\n        api.deleteTask(todoId, taskId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(deleteTasks(todoId, taskId))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const changeTask = (todoId: string, taskId: string, task: TaskType) => {\r\n    return (dispatch: Dispatch<ActionsTypes>) => {\r\n        api.changeTask(todoId, taskId, task)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTasks(todoId, taskId, res.data.data.item))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const changeTitleTodo = (todoId: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsTypes>) => {\r\n        api.changeTitleTodo(todoId, title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTitleTodolist(todoId, title))\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n","import React from 'react';\nimport './TodoList.css';\nimport TodoHeader from \"./TodoList/TodoHeader\";\nimport TodoTasks from \"./TodoList/TodoTasks\";\nimport TodoFooter from \"./TodoList/TodoFooter\";\nimport AddNewTitle from \"./AddNewTitle\";\nimport {connect} from \"react-redux\";\nimport {\n    changeTask, changeTitleTodo, createTask,\n    deleteTask, getTasks,\n} from \"./reducer\";\nimport {TaskType} from \"./Types/enteties\";\nimport {AppStateType} from \"./Store\";\n\n\ntype OwnTypes = {\n    key: string\n    id: string\n    title: string\n    onDeleteTodoList: (Id: string) => void\n    tasks: Array<TaskType>\n}\ntype StateType = {\n    tasks: Array<TaskType>\n    filterValue: string\n    editMode: boolean\n    title: string\n}\ntype MapDispatchPropsType = {\n    changeTask: (todoId: string, taskId: string, task: TaskType) => void\n    changeTitleTodo: (id: string, title: string) => void\n    createTask: (taskId: string, newTitle: string) => void\n    deleteTask: (todoId: string, taskId: string) => void\n    getTasks: (id: string) => void\n}\n\nclass TodoList extends React.Component <MapDispatchPropsType & OwnTypes, StateType> {\n    state: StateType = {\n        tasks: [],\n        filterValue: \"All\",\n        editMode: false,\n        title: ''\n    };\n\n    componentDidMount() {\n        this.restoreState();\n    }\n    restoreState = () => {\n        this.props.getTasks(this.props.id)\n    }\n    addTask = (newTitle: string) => {\n        this.props.createTask(this.props.id, newTitle)\n    };\n    onDeleteTask = (taskId: string) => {\n        this.props.deleteTask(this.props.id, taskId)\n    }\n    changeTitleTodo = (todoId: string , title: string) => {\n        this.props.changeTitleTodo(todoId , title)\n    }\n\n\n\n    changeTask = (task: TaskType) => {\n        this.props.changeTask(this.props.id, task.id, task)\n    }\n\n    changeStatus = (newTask: TaskType, status: boolean) => {\n        this.changeTask({...newTask, status: status === true ? 2 : 0});\n    }\n\n\n\n    changeTitle = (task: TaskType, title: string) => {\n        this.changeTask({...task, title: title})\n    }\n    changeFilter = (newFilterValue: string) => {\n        this.setState({filterValue: newFilterValue})\n    };\n\n\n    render = () => {\n        let {tasks = []} = this.props\n        let filtredTasks = tasks.filter(t => {\n            switch (this.state.filterValue) {\n                case 'Active':\n                    return t.status === 0;\n                case 'Completed':\n                    return t.status === 2;\n                case 'All':\n                    return true;\n            }\n        })\n\n        return (\n            <div className=\"todoList\">\n                <TodoHeader title={this.props.title}\n                            changeTitleTodo={this.changeTitleTodo}\n                            onDeleteTodoList={this.props.onDeleteTodoList}\n                            todoListId={this.props.id}/>\n                <AddNewTitle buttonStyle={'taskButton'}\n                             buttonTitle={'+ task'}\n                             style={'add-task'}\n                             addItem={this.addTask}\n                             holder={'new task me'}/>\n                <TodoTasks task={filtredTasks}\n                           onDeleteTask={this.onDeleteTask}\n                           changeTitle={this.changeTitle}\n                           changeStatus={this.changeStatus}/>\n                <TodoFooter filterValue={this.state.filterValue}\n                            changeFilter={this.changeFilter}/>\n            </div>\n\n        );\n    }\n}\n\n\nexport default connect<{}, MapDispatchPropsType, OwnTypes, AppStateType>(null,\n    {\n    changeTask,\n    changeTitleTodo,\n    createTask,\n    deleteTask,\n    getTasks\n})(TodoList);\n","import React from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewTitle from \"./AddNewTitle\";\nimport {connect} from \"react-redux\";\nimport {\n    createTodolists,\n    deleteTodolist, getTodolists,\n} from \"./reducer\";\nimport {AppStateType} from \"./Store\";\nimport {TodoListType} from \"./Types/enteties\";\n\n\ntype MapStatePropsType = {\n    todolists: Array<TodoListType>\n}\ntype MapDispatchPropsType = {\n    getTodolists: ()=> void\n    deleteTodolist: (Id: string)=> void\n    createTodolists: (title: string)=> void\n}\n\n\nclass App extends React.Component<MapStatePropsType & MapDispatchPropsType> {\n\n    componentDidMount() {\n        this.restoreState();\n    }\n    restoreState = () => {\n        this.props.getTodolists()\n    }\n    addTodoList = (title: string) => {\n        this.props.createTodolists(title)\n    }\n    onDeleteTodoList = (Id: string) => {\n        this.props.deleteTodolist(Id)\n    }\n\n\n    render = () => {\n        const todoLists = this.props.todolists.map\n        (t => <TodoList key={t.id}\n                        id={t.id}\n                        title={t.title}\n                        onDeleteTodoList={this.onDeleteTodoList}\n                        tasks={t.tasks}/>)\n\n        return (\n            <div className='backgroung'>\n                <div className='App'>\n                    <div className='main-header'>\n                        <span className='title'>Which task</span>\n                        <AddNewTitle inputStyleErr={'input-error'}\n                                     inputStyleDef={'input'}\n                                     buttonStyle={'header-button'}\n                                     buttonTitle={'Order'}\n                                     style={'add-title'}\n                                     addItem={this.addTodoList}/>\n                    </div>\n                    <div className='Appp'>\n                        {todoLists}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => {\n    return {\n        todolists: state.reducer.todolists\n    }\n}\n\n\nconst ConnectedApp = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\n    deleteTodolist,\n    createTodolists,\n    getTodolists\n})(App);\nexport default ConnectedApp;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    reducer: reducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./Store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}